/* tslint:disable */
/* eslint-disable */


/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * This file was automatically generated by pg-to-ts v.4.1.1
 * $ pg-to-ts generate -c postgresql://username:password@localhost:4433/authsphere -t clients -t knex_migrations -t knex_migrations_lock -t logins_attempts -t logins_attempts_mfas -t oauth_attempts -t users -t users_configurations -t users_logins_backup_codes -t users_logins_mfas -t users_logins_passwords -s public
 *
 */


export type Json = unknown;
export type logins_attempts_statuses = 'failure' | 'pending' | 'success';
export type oauth_attempts_status = 'created' | 'fulfilled' | 'pending' | 'rejected';
export type users_configurations_mfa_strategy = 'all_of' | 'one_of';
export type users_logins_mfas_types = 'authenticator_app' | 'email' | 'passkey';

// Table clients
export interface Clients {
  id: string;
  /** Unique identifier for the client */
  slug: string;
  /** Secret used to authenticate the client, only present for non-system clients */
  secret: string | null;
  /** URL to validate the audience of the client */
  aud_url: string;
  /** URI to redirect the user to after authorization */
  redirect_uri: string;
  /** Allowed scopes */
  scopes: string[];
  /** Allowed response types */
  response_types: string[];
  /** Whether the client is system (e.g. a first-party app) */
  is_system: boolean;
  created_at: Date;
  updated_at: Date;
}
export interface ClientsInput {
  id: string;
  /** Unique identifier for the client */
  slug: string;
  /** Secret used to authenticate the client, only present for non-system clients */
  secret?: string | null;
  /** URL to validate the audience of the client */
  aud_url: string;
  /** URI to redirect the user to after authorization */
  redirect_uri: string;
  /** Allowed scopes */
  scopes: string[];
  /** Allowed response types */
  response_types: string[];
  /** Whether the client is system (e.g. a first-party app) */
  is_system?: boolean;
  created_at?: Date;
  updated_at?: Date;
}
const clients = {
  tableName: 'clients',
  columns: ['id', 'slug', 'secret', 'aud_url', 'redirect_uri', 'scopes', 'response_types', 'is_system', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'slug', 'aud_url', 'redirect_uri', 'scopes', 'response_types'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Clients,
  $input: null as unknown as ClientsInput
} as const;

// Table knex_migrations
export interface KnexMigrations {
  id: number;
  name: string | null;
  batch: number | null;
  migration_time: Date | null;
}
export interface KnexMigrationsInput {
  id?: number;
  name?: string | null;
  batch?: number | null;
  migration_time?: Date | null;
}
const knex_migrations = {
  tableName: 'knex_migrations',
  columns: ['id', 'name', 'batch', 'migration_time'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as KnexMigrations,
  $input: null as unknown as KnexMigrationsInput
} as const;

// Table knex_migrations_lock
export interface KnexMigrationsLock {
  index: number;
  is_locked: number | null;
}
export interface KnexMigrationsLockInput {
  index?: number;
  is_locked?: number | null;
}
const knex_migrations_lock = {
  tableName: 'knex_migrations_lock',
  columns: ['index', 'is_locked'],
  requiredForInsert: [],
  primaryKey: 'index',
  foreignKeys: {},
  $type: null as unknown as KnexMigrationsLock,
  $input: null as unknown as KnexMigrationsLockInput
} as const;

// Table logins_attempts
export interface LoginsAttempts {
  /** Unique identifier for the login attempt */
  id: string;
  /** Token of the login attempt */
  token_hash: string | null;
  /** ID of the user that owns the login attempt */
  user_id: string;
  /** Status of the login attempt */
  status: logins_attempts_statuses;
  /** IP address of the login attempt */
  ip_address: string;
  /** User agent of the login attempt */
  user_agent: string;
  created_at: Date;
  updated_at: Date;
  oauth_attempt_id: string | null;
}
export interface LoginsAttemptsInput {
  /** Unique identifier for the login attempt */
  id: string;
  /** Token of the login attempt */
  token_hash?: string | null;
  /** ID of the user that owns the login attempt */
  user_id: string;
  /** Status of the login attempt */
  status: logins_attempts_statuses;
  /** IP address of the login attempt */
  ip_address: string;
  /** User agent of the login attempt */
  user_agent: string;
  created_at?: Date;
  updated_at?: Date;
  oauth_attempt_id?: string | null;
}
const logins_attempts = {
  tableName: 'logins_attempts',
  columns: ['id', 'token_hash', 'user_id', 'status', 'ip_address', 'user_agent', 'created_at', 'updated_at', 'oauth_attempt_id'],
  requiredForInsert: ['id', 'user_id', 'status', 'ip_address', 'user_agent'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'users', column: 'id', $type: null as unknown as Users },
    oauth_attempt_id: { table: 'oauth_attempts', column: 'id', $type: null as unknown as OauthAttempts },
  },
  $type: null as unknown as LoginsAttempts,
  $input: null as unknown as LoginsAttemptsInput
} as const;

// Table logins_attempts_mfas
export interface LoginsAttemptsMfas {
  /** Unique identifier for the login attempt */
  id: string;
  /** ID of the user that owns the login attempt */
  user_id: string;
  /** ID of the MFA used in the login attempt */
  mfa_id: string;
  /** Status of the login attempt */
  status: logins_attempts_statuses;
  created_at: Date;
  updated_at: Date;
}
export interface LoginsAttemptsMfasInput {
  /** Unique identifier for the login attempt */
  id: string;
  /** ID of the user that owns the login attempt */
  user_id: string;
  /** ID of the MFA used in the login attempt */
  mfa_id: string;
  /** Status of the login attempt */
  status: logins_attempts_statuses;
  created_at?: Date;
  updated_at?: Date;
}
const logins_attempts_mfas = {
  tableName: 'logins_attempts_mfas',
  columns: ['id', 'user_id', 'mfa_id', 'status', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'user_id', 'mfa_id', 'status'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'users', column: 'id', $type: null as unknown as Users },
    mfa_id: { table: 'users_logins_mfas', column: 'id', $type: null as unknown as UsersLoginsMfas },
  },
  $type: null as unknown as LoginsAttemptsMfas,
  $input: null as unknown as LoginsAttemptsMfasInput
} as const;

// Table oauth_attempts
export interface OauthAttempts {
  /** Unique identifier for the oauth attempt */
  id: string;
  /** Token of the oauth attempt */
  token_hash: string;
  /** Client of the oauth attempt */
  client_id: string;
  /** Scopes of the oauth attempt */
  scopes: string[];
  /** Status of the oauth attempt */
  status: oauth_attempts_status;
  /** Grant type of the oauth attempt */
  response_types: string[] | null;
  /** Code challenge of the oauth attempt */
  code_challenge: string | null;
  /** Code challenge method of the oauth attempt */
  code_challenge_method: string | null;
  /** State of the oauth attempt */
  state: string | null;
  /** IP address of the oauth attempt */
  ip_address: string;
  /** User agent of the oauth attempt */
  user_agent: string;
  created_at: Date;
  updated_at: Date;
}
export interface OauthAttemptsInput {
  /** Unique identifier for the oauth attempt */
  id: string;
  /** Token of the oauth attempt */
  token_hash: string;
  /** Client of the oauth attempt */
  client_id: string;
  /** Scopes of the oauth attempt */
  scopes?: string[];
  /** Status of the oauth attempt */
  status?: oauth_attempts_status;
  /** Grant type of the oauth attempt */
  response_types?: string[] | null;
  /** Code challenge of the oauth attempt */
  code_challenge?: string | null;
  /** Code challenge method of the oauth attempt */
  code_challenge_method?: string | null;
  /** State of the oauth attempt */
  state?: string | null;
  /** IP address of the oauth attempt */
  ip_address: string;
  /** User agent of the oauth attempt */
  user_agent: string;
  created_at?: Date;
  updated_at?: Date;
}
const oauth_attempts = {
  tableName: 'oauth_attempts',
  columns: ['id', 'token_hash', 'client_id', 'scopes', 'status', 'response_types', 'code_challenge', 'code_challenge_method', 'state', 'ip_address', 'user_agent', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'token_hash', 'client_id', 'ip_address', 'user_agent'],
  primaryKey: 'id',
  foreignKeys: { client_id: { table: 'clients', column: 'id', $type: null as unknown as Clients }, },
  $type: null as unknown as OauthAttempts,
  $input: null as unknown as OauthAttemptsInput
} as const;

// Table users
export interface Users {
  /** Unique identifier for the user */
  id: string;
  /** Email address of the user */
  email: string;
  /** First name of the user */
  first_name: string;
  /** Last name of the user */
  last_name: string;
  /** URL of the user's avatar */
  avatar_url: string | null;
  created_at: Date;
  updated_at: Date;
}
export interface UsersInput {
  /** Unique identifier for the user */
  id: string;
  /** Email address of the user */
  email: string;
  /** First name of the user */
  first_name: string;
  /** Last name of the user */
  last_name: string;
  /** URL of the user's avatar */
  avatar_url?: string | null;
  created_at?: Date;
  updated_at?: Date;
}
const users = {
  tableName: 'users',
  columns: ['id', 'email', 'first_name', 'last_name', 'avatar_url', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'email', 'first_name', 'last_name'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Users,
  $input: null as unknown as UsersInput
} as const;

// Table users_configurations
export interface UsersConfigurations {
  id: string;
  /** Unique identifier for the user */
  user_id: string;
  /** MFA auth type */
  mfa_strategy: users_configurations_mfa_strategy;
  created_at: Date;
  updated_at: Date;
}
export interface UsersConfigurationsInput {
  id: string;
  /** Unique identifier for the user */
  user_id: string;
  /** MFA auth type */
  mfa_strategy: users_configurations_mfa_strategy;
  created_at?: Date;
  updated_at?: Date;
}
const users_configurations = {
  tableName: 'users_configurations',
  columns: ['id', 'user_id', 'mfa_strategy', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'user_id', 'mfa_strategy'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as UsersConfigurations,
  $input: null as unknown as UsersConfigurationsInput
} as const;

// Table users_logins_backup_codes
export interface UsersLoginsBackupCodes {
  /** Unique identifier for the login detail */
  id: string;
  /** ID of the user that owns the login detail */
  user_id: string;
  /** Backup code hashed */
  code: string;
  /** Salt for the backup code */
  salt: string;
  created_at: Date;
  updated_at: Date;
}
export interface UsersLoginsBackupCodesInput {
  /** Unique identifier for the login detail */
  id: string;
  /** ID of the user that owns the login detail */
  user_id: string;
  /** Backup code hashed */
  code: string;
  /** Salt for the backup code */
  salt: string;
  created_at?: Date;
  updated_at?: Date;
}
const users_logins_backup_codes = {
  tableName: 'users_logins_backup_codes',
  columns: ['id', 'user_id', 'code', 'salt', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'user_id', 'code', 'salt'],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'users', column: 'id', $type: null as unknown as Users }, },
  $type: null as unknown as UsersLoginsBackupCodes,
  $input: null as unknown as UsersLoginsBackupCodesInput
} as const;

// Table users_logins_mfas
export interface UsersLoginsMfas {
  /** Unique identifier for the login detail */
  id: string;
  /** ID of the user that owns the login detail */
  user_id: string;
  /** Name of the MFA */
  name: string;
  /** Type of MFA */
  type: users_logins_mfas_types;
  /** Secret of the MFA */
  secret: string;
  /** Last time the secret was changed */
  last_changed_at: Date;
  created_at: Date;
  updated_at: Date;
}
export interface UsersLoginsMfasInput {
  /** Unique identifier for the login detail */
  id: string;
  /** ID of the user that owns the login detail */
  user_id: string;
  /** Name of the MFA */
  name: string;
  /** Type of MFA */
  type: users_logins_mfas_types;
  /** Secret of the MFA */
  secret: string;
  /** Last time the secret was changed */
  last_changed_at?: Date;
  created_at?: Date;
  updated_at?: Date;
}
const users_logins_mfas = {
  tableName: 'users_logins_mfas',
  columns: ['id', 'user_id', 'name', 'type', 'secret', 'last_changed_at', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'user_id', 'name', 'type', 'secret'],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'users', column: 'id', $type: null as unknown as Users }, },
  $type: null as unknown as UsersLoginsMfas,
  $input: null as unknown as UsersLoginsMfasInput
} as const;

// Table users_logins_passwords
export interface UsersLoginsPasswords {
  /** Unique identifier for the login detail */
  id: string;
  /** ID of the user that owns the login detail */
  user_id: string;
  /** Hashed password of the user */
  password: string;
  /** Last time the password was changed */
  last_changed_at: Date;
  created_at: Date;
  updated_at: Date;
}
export interface UsersLoginsPasswordsInput {
  /** Unique identifier for the login detail */
  id: string;
  /** ID of the user that owns the login detail */
  user_id: string;
  /** Hashed password of the user */
  password: string;
  /** Last time the password was changed */
  last_changed_at?: Date;
  created_at?: Date;
  updated_at?: Date;
}
const users_logins_passwords = {
  tableName: 'users_logins_passwords',
  columns: ['id', 'user_id', 'password', 'last_changed_at', 'created_at', 'updated_at'],
  requiredForInsert: ['id', 'user_id', 'password'],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'users', column: 'id', $type: null as unknown as Users }, },
  $type: null as unknown as UsersLoginsPasswords,
  $input: null as unknown as UsersLoginsPasswordsInput
} as const;


export interface TableTypes {
  clients: {
    select: Clients;
    input: ClientsInput;
  };
  knex_migrations: {
    select: KnexMigrations;
    input: KnexMigrationsInput;
  };
  knex_migrations_lock: {
    select: KnexMigrationsLock;
    input: KnexMigrationsLockInput;
  };
  logins_attempts: {
    select: LoginsAttempts;
    input: LoginsAttemptsInput;
  };
  logins_attempts_mfas: {
    select: LoginsAttemptsMfas;
    input: LoginsAttemptsMfasInput;
  };
  oauth_attempts: {
    select: OauthAttempts;
    input: OauthAttemptsInput;
  };
  users: {
    select: Users;
    input: UsersInput;
  };
  users_configurations: {
    select: UsersConfigurations;
    input: UsersConfigurationsInput;
  };
  users_logins_backup_codes: {
    select: UsersLoginsBackupCodes;
    input: UsersLoginsBackupCodesInput;
  };
  users_logins_mfas: {
    select: UsersLoginsMfas;
    input: UsersLoginsMfasInput;
  };
  users_logins_passwords: {
    select: UsersLoginsPasswords;
    input: UsersLoginsPasswordsInput;
  };
}

export const tables = {
  clients,
  knex_migrations,
  knex_migrations_lock,
  logins_attempts,
  logins_attempts_mfas,
  oauth_attempts,
  users,
  users_configurations,
  users_logins_backup_codes,
  users_logins_mfas,
  users_logins_passwords,
}
